@inject IMatToaster Toaster

@code {
    private bool _showProgressBar;
    private string _maximumOpacity;
    private string _showTransitionDuration;
    private string _visibleStateDuration;
    private string _hideTransitionDuration;
    [Parameter]
    public string Titulo { get; set; }
    [Parameter]
    public string Mensaje { get; set; }
    [Parameter]
    public bool BotonCerrar { get; set; } = true;
    [Parameter]
    public bool ActionClick { get; set; } = false;
    [Parameter]
    public bool Interaccion { get; set; } = true;
    [Parameter]
    public MatToastType TipoToast { get; set; }
    [Parameter]
    public string PositionToast { get; set; } = "BottomRight";
    [Parameter]
    public string IconToast { get; set; }
    [Parameter]
    public string MaxShow { get; set; } = "5";


    protected override void OnInitialized()
    {
        _showProgressBar = Toaster.Configuration.ShowProgressBar;
        _maximumOpacity = Toaster.Configuration.MaximumOpacity.ToString();
        _showTransitionDuration = Toaster.Configuration.ShowTransitionDuration.ToString();
        _visibleStateDuration = Toaster.Configuration.VisibleStateDuration.ToString();
        _hideTransitionDuration = Toaster.Configuration.HideTransitionDuration.ToString();
        Show(TipoToast,IconToast);
    }
    protected override async Task OnParametersSetAsync()
    {
        Show(TipoToast, IconToast);
    }
    public void Show(MatToastType type, string icon = "")
    {
        Toaster.Add(Mensaje, type, Titulo, icon, config =>
        {
            config.ShowCloseButton = BotonCerrar;
            config.ShowProgressBar = _showProgressBar;
            config.MaximumOpacity = Convert.ToInt32(_maximumOpacity);
            Toaster.Configuration.Position = (MatToastPosition)Enum.Parse(typeof(MatToastPosition), PositionToast);
            Toaster.Configuration.MaxDisplayedToasts = Convert.ToInt32(MaxShow);
            config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
            config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
            config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

            config.RequireInteraction = Interaccion;

            if (ActionClick)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }

}

